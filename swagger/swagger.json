{
  "openapi": "3.0.0",
  "info": {
    "title": "SongBanks API",
    "description": "Auto-generated API documentation using Swagpress framework",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Development server"
    },
    {
      "url": "https://songbanks-v1-1.vercel.app/api",
      "description": "Production server"
    }
  ],
  "components": {
    "schemas": {
      "BaseResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          }
        }
      },
      "BaseResponseWithData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "description": "Response data payload"
              }
            }
          }
        ]
      },
      "BadRequestError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Bad request"
          },
          "message": {
            "type": "string",
            "example": "Bad request"
          },
          "statusCode": {
            "type": "integer",
            "example": 400
          }
        }
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Unauthorized"
          },
          "message": {
            "type": "string",
            "example": "Unauthorized"
          },
          "statusCode": {
            "type": "integer",
            "example": 401
          }
        }
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Internal server error"
          },
          "message": {
            "type": "string",
            "example": "Internal server error"
          },
          "statusCode": {
            "type": "integer",
            "example": 500
          }
        }
      },
      "SimpleError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Invalid status. Must be either \"active\" or \"suspend\""
          }
        }
      },
      "AccountAccessDeniedError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 403
          },
          "message": {
            "type": "string",
            "example": "Account access denied"
          },
          "error": {
            "type": "string",
            "example": "Your account status is inactive. Please contact administrator."
          }
        }
      },
      "ForbiddenError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Forbidden"
          },
          "message": {
            "type": "string",
            "example": "Access denied"
          },
          "statusCode": {
            "type": "integer",
            "example": 403
          }
        }
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Not Found"
          },
          "message": {
            "type": "string",
            "example": "Resource not found"
          },
          "statusCode": {
            "type": "integer",
            "example": 404
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Validation Error"
          },
          "message": {
            "type": "string",
            "example": "Validation failed"
          },
          "statusCode": {
            "type": "integer",
            "example": 422
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Field 'name' is required",
              "Field 'email' must be valid"
            ]
          }
        }
      },
      "PaginatedResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "pagination": {
                    "type": "object",
                    "properties": {
                      "currentPage": {
                        "type": "integer",
                        "example": 1
                      },
                      "totalPages": {
                        "type": "integer",
                        "example": 10
                      },
                      "totalItems": {
                        "type": "integer",
                        "example": 100
                      },
                      "itemsPerPage": {
                        "type": "integer",
                        "example": 10
                      },
                      "hasNextPage": {
                        "type": "boolean",
                        "example": true
                      },
                      "hasPrevPage": {
                        "type": "boolean",
                        "example": false
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "CreatePlaylistRequest": {
        "type": "object",
        "required": [
          "playlist_name"
        ],
        "properties": {
          "playlist_name": {
            "type": "string",
            "example": "My Favorite Songs",
            "description": "Name of the playlist"
          },
          "songs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "01HPQR2ST3UV4WXY5Z6789ABCD"
            ],
            "description": "Array of song IDs to include in the playlist"
          }
        }
      },
      "CreateSongRequest": {
        "type": "object",
        "required": [
          "title",
          "artist"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "Amazing Grace",
            "description": "Title of the song"
          },
          "artist": {
            "type": "string",
            "example": "John Newton",
            "description": "Artist or composer of the song"
          },
          "base_chord": {
            "type": "string",
            "example": "G",
            "description": "Base chord of the song"
          },
          "lyrics_and_chords": {
            "type": "string",
            "example": "Amazing grace how sweet the sound...",
            "description": "Lyrics with chord progressions"
          },
          "tag_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Gospel",
              "Worship",
              "Contemporary"
            ],
            "description": "Array of tag names. If a tag doesn't exist, it will be created automatically"
          }
        }
      },
      "GetOrCreateTagRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "rock",
            "description": "Name of the tag to get or create"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "example": "brimnasional@gmail.com",
            "description": "Username for admin or email for user"
          },
          "password": {
            "type": "string",
            "example": "password123",
            "description": "User's password"
          }
        }
      },
      "UpdatePlaylistRequest": {
        "type": "object",
        "properties": {
          "playlist_name": {
            "type": "string",
            "example": "Updated Playlist Name",
            "description": "Updated name of the playlist"
          },
          "songs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "01HPQR2ST3UV4WXY5Z6789ABCD",
              "01HPQR2ST3UV4WXY5Z6789ABCE"
            ],
            "description": "Updated array of song IDs for the playlist"
          }
        }
      },
      "UpdateSongRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Amazing Grace (Updated)",
            "description": "Updated title of the song"
          },
          "artist": {
            "type": "string",
            "example": "John Newton",
            "description": "Updated artist or composer of the song"
          },
          "base_chord": {
            "type": "string",
            "example": "C",
            "description": "Updated base chord of the song"
          },
          "lyrics_and_chords": {
            "type": "string",
            "example": "Amazing grace how sweet the sound...",
            "description": "Updated lyrics with chord progressions"
          },
          "tag_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Gospel",
              "Contemporary"
            ],
            "description": "Updated array of tag names. If a tag doesn't exist, it will be created automatically"
          }
        }
      },
      "ArtistsResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Artists retrieved successfully"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "JPCC Worship",
              "description": "Artist name"
            },
            "description": "Array of unique artist names"
          }
        }
      },
      "ConflictError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 409
          },
          "message": {
            "type": "string",
            "example": "A playlist with this name already exists"
          },
          "error": {
            "type": "string",
            "example": "Conflict"
          }
        }
      },
      "DeleteTeamResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Playlist team deleted successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "1",
                "description": "ID of the deleted playlist team"
              }
            }
          }
        }
      },
      "JoinPlaylistResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 201
          },
          "message": {
            "type": "string",
            "example": "Successfully joined playlist team as member"
          },
          "data": {
            "type": "object",
            "properties": {
              "playlist_team_id": {
                "type": "integer",
                "description": "ID of the created playlist team",
                "example": 456
              },
              "playlist_id": {
                "type": "integer",
                "description": "ID of the playlist that was joined",
                "example": 123
              },
              "playlist_name": {
                "type": "string",
                "description": "Name of the playlist",
                "example": "My Awesome Playlist"
              },
              "lead_id": {
                "type": "integer",
                "description": "User ID of the team leader (playlist creator)",
                "example": 789
              },
              "joiner_id": {
                "type": "integer",
                "description": "User ID of the person who joined via sharelink",
                "example": 456
              },
              "message": {
                "type": "string",
                "description": "Success message",
                "example": "Successfully joined playlist team as member"
              },
              "members": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Array of user IDs who are members of the team",
                "example": [
                  123,
                  456,
                  789
                ]
              }
            },
            "required": [
              "playlist_team_id",
              "playlist_id",
              "playlist_name",
              "lead_id",
              "joiner_id",
              "message",
              "members"
            ]
          }
        }
      },
      "LeaveTeamResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully left the team"
          },
          "data": {
            "type": "object",
            "properties": {
              "team_id": {
                "type": "string",
                "example": "1",
                "description": "ID of the playlist team"
              },
              "user_id": {
                "type": "string",
                "example": "123",
                "description": "ID of the user who left the team"
              }
            }
          }
        }
      },
      "LoginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponseWithData"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "example": 200
              },
              "message": {
                "example": "Login successful"
              },
              "data": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  },
                  "user": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        ]
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Logout successful"
          }
        }
      },
      "PermissionResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 200,
            "description": "HTTP status code"
          },
          "message": {
            "type": "string",
            "example": "Permission granted",
            "description": "Response message"
          },
          "data": {
            "type": "object",
            "properties": {
              "hasPermission": {
                "type": "boolean",
                "example": true,
                "description": "Whether user has the required permission"
              },
              "userType": {
                "type": "string",
                "enum": [
                  "pengurus",
                  "peserta"
                ],
                "example": "pengurus",
                "description": "Current user type"
              },
              "isAdmin": {
                "type": "boolean",
                "example": true,
                "description": "Whether user is admin"
              }
            }
          }
        }
      },
      "PlaylistResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Playlist retrieved successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "01HPQR2ST3UV4WXY5Z6789ABCD",
                "description": "Unique identifier for the playlist"
              },
              "playlist_name": {
                "type": "string",
                "example": "My Favorite Songs",
                "description": "Name of the playlist"
              },
              "user_id": {
                "type": "string",
                "example": "user123",
                "description": "ID of the user who owns the playlist"
              },
              "songs": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "01HPQR2ST3UV4WXY5Z6789ABCD"
                    },
                    "title": {
                      "type": "string",
                      "example": "Amazing Grace"
                    },
                    "artist": {
                      "type": "string",
                      "example": "John Newton"
                    },
                    "base_chord": {
                      "type": "string",
                      "example": "G"
                    }
                  }
                },
                "description": "Array of songs in the playlist"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2024-01-15T10:30:00.000Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2024-01-15T10:30:00.000Z"
              }
            }
          }
        }
      },
      "PlaylistTeamResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Playlist team details retrieved successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1,
                "description": "Unique identifier for the playlist team"
              },
              "playlist_id": {
                "type": "integer",
                "example": 34,
                "description": "ID of the associated playlist"
              },
              "lead_id": {
                "type": "integer",
                "example": 544,
                "description": "ID of the team leader"
              },
              "is_hidden": {
                "type": "integer",
                "example": 0,
                "description": "Team visibility flag (0=visible, 1=hidden)"
              },
              "members": {
                "type": "string",
                "example": "[1,2,3]",
                "description": "JSON array string of member user IDs"
              },
              "playlist": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 34
                  },
                  "playlist_name": {
                    "type": "string",
                    "example": "Team Playlist"
                  }
                },
                "description": "Associated playlist details"
              },
              "leader": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 544
                  },
                  "email": {
                    "type": "string",
                    "example": "leader@example.com"
                  }
                },
                "description": "Team leader details"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-08-30T07:13:03.000Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-08-30T07:28:55.000Z"
              }
            }
          }
        }
      },
      "PlaylistTeamsResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Playlist teams retrieved successfully"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1,
                  "description": "Unique identifier for the playlist team"
                },
                "playlist_id": {
                  "type": "integer",
                  "example": 34,
                  "description": "ID of the associated playlist"
                },
                "lead_id": {
                  "type": "integer",
                  "example": 544,
                  "description": "ID of the team leader"
                },
                "is_hidden": {
                  "type": "integer",
                  "example": 0,
                  "description": "Team visibility flag (0=visible, 1=hidden)"
                },
                "members": {
                  "type": "string",
                  "example": "[1,2,3]",
                  "description": "JSON array string of member user IDs"
                },
                "playlist": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 34
                    },
                    "playlist_name": {
                      "type": "string",
                      "example": "Team Playlist"
                    }
                  },
                  "description": "Associated playlist details"
                },
                "leader": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 544
                    },
                    "email": {
                      "type": "string",
                      "example": "leader@example.com"
                    }
                  },
                  "description": "Team leader details"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2025-08-30T07:13:03.000Z"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2025-08-30T07:28:55.000Z"
                }
              }
            },
            "description": "Array of playlist teams where the user is the leader"
          }
        }
      },
      "PlaylistsResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Playlists retrieved successfully"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "01HPQR2ST3UV4WXY5Z6789ABCD",
                  "description": "Unique identifier for the playlist"
                },
                "playlist_name": {
                  "type": "string",
                  "example": "My Favorite Songs",
                  "description": "Name of the playlist"
                },
                "user_id": {
                  "type": "string",
                  "example": "user123",
                  "description": "ID of the user who owns the playlist"
                },
                "songs_count": {
                  "type": "integer",
                  "example": 5,
                  "description": "Number of songs in the playlist"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-15T10:30:00.000Z"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-15T10:30:00.000Z"
                }
              }
            },
            "description": "Array of playlists"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "currentPage": {
                "type": "integer",
                "example": 1,
                "description": "Current page number"
              },
              "totalPages": {
                "type": "integer",
                "example": 3,
                "description": "Total number of pages"
              },
              "totalItems": {
                "type": "integer",
                "example": 25,
                "description": "Total number of playlists"
              },
              "itemsPerPage": {
                "type": "integer",
                "example": 10,
                "description": "Number of items per page"
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true,
                "description": "Whether there is a next page"
              },
              "hasPrevPage": {
                "type": "boolean",
                "example": false,
                "description": "Whether there is a previous page"
              }
            },
            "description": "Pagination information"
          }
        }
      },
      "RemoveMemberResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Member removed from team successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "team_id": {
                "type": "string",
                "example": "1",
                "description": "ID of the playlist team"
              },
              "user_id": {
                "type": "string",
                "example": "123",
                "description": "ID of the removed user"
              }
            }
          }
        }
      },
      "SharelinkResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 201
          },
          "message": {
            "type": "string",
            "example": "Sharelink generated successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Playlist ID",
                "example": "123"
              },
              "playlist_name": {
                "type": "string",
                "description": "Name of the playlist",
                "example": "My Awesome Playlist"
              },
              "sharable_link": {
                "type": "string",
                "description": "Shareable link URL for joining the playlist team",
                "example": "http://localhost:3000/playlist/join/abc123token"
              },
              "share_token": {
                "type": "string",
                "description": "Unique share token for the playlist",
                "example": "abc123token"
              },
              "is_shared": {
                "type": "boolean",
                "description": "Whether the playlist is shared",
                "example": true
              },
              "playlist_team_id": {
                "type": "integer",
                "description": "ID of the created playlist team",
                "example": 456
              }
            },
            "required": [
              "id",
              "playlist_name",
              "sharable_link",
              "share_token",
              "is_shared",
              "playlist_team_id"
            ]
          }
        }
      },
      "SongResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Song retrieved successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "01HPQR2ST3UV4WXY5Z6789ABCD",
                "description": "Unique identifier for the song"
              },
              "title": {
                "type": "string",
                "example": "Amazing Grace",
                "description": "Title of the song"
              },
              "artist": {
                "type": "string",
                "example": "John Newton",
                "description": "Artist or composer of the song"
              },
              "base_chord": {
                "type": "string",
                "example": "G",
                "description": "Base chord of the song"
              },
              "lyrics_and_chords": {
                "type": "string",
                "example": "Amazing grace how sweet the sound...",
                "description": "Lyrics with chord progressions"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "01HPQR2ST3UV4WXY5Z6789ABCE"
                    },
                    "name": {
                      "type": "string",
                      "example": "Gospel"
                    },
                    "description": {
                      "type": "string",
                      "example": "Traditional gospel music"
                    }
                  }
                },
                "description": "Tags associated with the song"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2024-01-15T10:30:00.000Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2024-01-15T10:30:00.000Z"
              }
            }
          }
        }
      },
      "SongsResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Songs retrieved successfully"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "01HPQR2ST3UV4WXY5Z6789ABCD",
                  "description": "Unique identifier for the song"
                },
                "title": {
                  "type": "string",
                  "example": "Amazing Grace",
                  "description": "Title of the song"
                },
                "artist": {
                  "type": "string",
                  "example": "John Newton",
                  "description": "Artist or composer of the song"
                },
                "base_chord": {
                  "type": "string",
                  "example": "G",
                  "description": "Base chord of the song"
                },
                "lyrics_and_chords": {
                  "type": "string",
                  "example": "Amazing grace how sweet the sound...",
                  "description": "Lyrics with chord progressions"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "01HPQR2ST3UV4WXY5Z6789ABCE"
                      },
                      "name": {
                        "type": "string",
                        "example": "Gospel"
                      },
                      "description": {
                        "type": "string",
                        "example": "Traditional gospel music"
                      }
                    }
                  },
                  "description": "Tags associated with the song"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-15T10:30:00.000Z"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-15T10:30:00.000Z"
                }
              }
            },
            "description": "Array of songs"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "currentPage": {
                "type": "integer",
                "example": 1,
                "description": "Current page number"
              },
              "totalPages": {
                "type": "integer",
                "example": 5,
                "description": "Total number of pages"
              },
              "totalItems": {
                "type": "integer",
                "example": 42,
                "description": "Total number of songs"
              },
              "itemsPerPage": {
                "type": "integer",
                "example": 10,
                "description": "Number of items per page"
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true,
                "description": "Whether there is a next page"
              },
              "hasPrevPage": {
                "type": "boolean",
                "example": false,
                "description": "Whether there is a previous page"
              }
            },
            "description": "Pagination information"
          }
        }
      },
      "TagResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Tag created successfully"
          },
          "data": {
            "$ref": "#/components/schemas/Tag"
          }
        }
      },
      "TagsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Get All Tags"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "UserListResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 200,
            "description": "HTTP status code"
          },
          "message": {
            "type": "string",
            "example": "User list retrieved successfully",
            "description": "Response message"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id_peserta": {
                  "type": "integer",
                  "example": 1,
                  "description": "User ID"
                },
                "usercode": {
                  "type": "string",
                  "example": "LUP-1",
                  "description": "User code"
                },
                "nama": {
                  "type": "string",
                  "example": "Sintikhe Damayanti",
                  "description": "User full name"
                },
                "gender": {
                  "type": "string",
                  "example": "Wanita",
                  "description": "User gender"
                },
                "email": {
                  "type": "string",
                  "example": "sintikhed@gmail.com",
                  "description": "User email address"
                },
                "userlevel": {
                  "type": "string",
                  "example": "5",
                  "description": "User access level"
                },
                "status": {
                  "type": "string",
                  "example": "active",
                  "description": "User account status"
                },
                "role": {
                  "type": "string",
                  "example": "member",
                  "description": "User role"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-01T12:00:00Z",
                  "description": "Account creation timestamp"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-01T12:00:00Z",
                  "description": "Last update timestamp"
                }
              }
            },
            "description": "Array of user objects"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "currentPage": {
                "type": "integer",
                "example": 1,
                "description": "Current page number"
              },
              "totalPages": {
                "type": "integer",
                "example": 5,
                "description": "Total number of pages"
              },
              "totalItems": {
                "type": "integer",
                "example": 50,
                "description": "Total number of items"
              },
              "itemsPerPage": {
                "type": "integer",
                "example": 10,
                "description": "Number of items per page"
              }
            },
            "description": "Pagination information"
          },
          "search": {
            "type": "string",
            "example": "sintikhe",
            "description": "Search term used for filtering (null if no search applied)"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 200,
            "description": "HTTP status code"
          },
          "message": {
            "type": "string",
            "example": "Current user retrieved successfully",
            "description": "Response message"
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "10"
                  },
                  "nama": {
                    "type": "string",
                    "example": "BRIM Nasional"
                  },
                  "username": {
                    "type": "string",
                    "example": "brimnasional@gmail.com"
                  },
                  "userType": {
                    "type": "string",
                    "enum": [
                      "pengurus",
                      "peserta"
                    ],
                    "example": "pengurus"
                  },
                  "isAdmin": {
                    "type": "boolean",
                    "example": true
                  },
                  "leveladmin": {
                    "type": "string",
                    "example": "2",
                    "description": "Only present for pengurus (admin) users"
                  },
                  "userlevel": {
                    "type": "string",
                    "example": "4",
                    "description": "Only present for peserta (regular) users"
                  },
                  "verifikasi": {
                    "type": "string",
                    "example": "1",
                    "description": "Only present for peserta (regular) users"
                  },
                  "nowa": {
                    "type": "string",
                    "example": "08123456789",
                    "description": "Phone number"
                  },
                  "kotalevelup": {
                    "type": "string",
                    "example": "Jakarta",
                    "description": "City level up"
                  }
                }
              }
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "user123"
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "member"
            ],
            "example": "member"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "pending",
              "suspend",
              "request",
              "guest"
            ],
            "example": "active"
          },
          "is_admin": {
            "type": "boolean",
            "example": false,
            "description": "Only present for admin users"
          }
        }
      },
      "VerifyTokenRequest": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        }
      },
      "VerifyTokenResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponseWithData"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "example": 200
              },
              "message": {
                "example": "Token verified successfully"
              },
              "data": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        ]
      },
      "RefreshTokenResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponseWithData"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "example": 200
              },
              "message": {
                "example": "Token refreshed successfully"
              },
              "data": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  }
                }
              }
            }
          }
        ]
      },
      "Song": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "song123"
          },
          "title": {
            "type": "string",
            "example": "Song Title"
          },
          "artist": {
            "type": "string",
            "example": "Artist Name"
          }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "note123"
          },
          "notes": {
            "type": "string",
            "example": "This is a note"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "Song": {
            "$ref": "#/components/schemas/Song"
          }
        }
      },
      "NotesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Get All Notes"
          },
          "id": {
            "type": "string",
            "example": "user123"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "tag123"
          },
          "name": {
            "type": "string",
            "example": "Rock"
          },
          "description": {
            "type": "string",
            "example": "Rock music genre"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateTagRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Rock",
            "description": "The name of the tag"
          },
          "description": {
            "type": "string",
            "example": "Rock music genre",
            "description": "Optional description of the tag"
          }
        }
      },
      "UpdateTagRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Rock",
            "description": "The name of the tag"
          },
          "description": {
            "type": "string",
            "example": "Rock music genre",
            "description": "Optional description of the tag"
          }
        }
      },
      "UserAccessResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponseWithData"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "example": 200
              },
              "message": {
                "example": "User access list retrieved successfully"
              },
              "data": {
                "type": "object",
                "properties": {
                  "active_users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "request_users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "suspended_users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "UpdateUserAccessRequest": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "active",
              "suspend"
            ],
            "example": "active"
          }
        }
      },
      "UpdateUserAccessResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponseWithData"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "example": 200
              },
              "message": {
                "example": "User access updated successfully"
              },
              "data": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "user123"
                  },
                  "status": {
                    "type": "string",
                    "example": "active"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "paths": {
    "/artists": {
      "get": {
        "summary": "Get all artists",
        "description": "Retrieve all unique artists from songs table",
        "tags": [
          "Artist"
        ],
        "responses": {
          "200": {
            "description": "Artists retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArtistsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticate admin (pengurus) with username/password or user (peserta) with email/password",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid credentials or insufficient access level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "User logout",
        "description": "Logout authenticated user",
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "summary": "Get current user",
        "description": "Get current authenticated user data",
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Current user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/check-permission": {
      "get": {
        "summary": "Check user permission",
        "description": "Check if current user has required role permission",
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Permission check result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/notes/{user_id}/{song_id}": {
      "post": {
        "summary": "Add note to song (Vol_User Only)",
        "description": "Auto-generated endpoint for NoteController.createNoteForSong",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/notes/{user_id}": {
      "get": {
        "summary": "Get all notes by user (Vol_User Only)",
        "description": "Auto-generated endpoint for NoteController.getAllUserNotes",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/notes/{user_id}/{id}": {
      "get": {
        "summary": "Get note by ID (Vol_User Only)",
        "description": "Auto-generated endpoint for NoteController.getNoteById",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update note (Vol_User Only)",
        "description": "Auto-generated endpoint for NoteController.updateNote",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete note (Vol_User Only)",
        "description": "Auto-generated endpoint for NoteController.deleteNote",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/playlists": {
      "post": {
        "summary": "Create new playlist",
        "description": "Create a playlist for the authenticated user with optional songs",
        "tags": [
          "Playlist"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlaylistRequest"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Playlist created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "409": {
            "description": "Playlist name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all playlists",
        "description": "Retrieve all playlists for the authenticated user with pagination",
        "tags": [
          "Playlist"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Number of items per page"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of playlists retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/playlists/{id}": {
      "get": {
        "summary": "Get playlist by ID",
        "description": "Retrieve a specific playlist by ID. Accessible by playlist owner and team members.",
        "tags": [
          "Playlist"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Playlist ID"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Playlist retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Playlist not found or access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update playlist",
        "description": "Update playlist name and songs array for the authenticated user",
        "tags": [
          "Playlist"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Playlist ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlaylistRequest"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Playlist updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Playlist not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Playlist name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete playlist",
        "description": "Delete a playlist by ID for the authenticated user",
        "tags": [
          "Playlist"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Playlist ID"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Playlist deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseWithData"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Playlist not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/playlists/{id}/sharelink": {
      "post": {
        "summary": "Generate playlist sharelink",
        "description": "Generate a shareable link for a playlist that can be used to create a playlist team",
        "tags": [
          "Playlist"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Playlist ID"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Sharelink generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharelinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Playlist not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/playlists/join/{shareToken}": {
      "post": {
        "summary": "Join playlist via sharelink",
        "description": "Join a playlist team using a share token, with the playlist creator as team leader",
        "tags": [
          "Playlist"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "shareToken",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Share token from the playlist sharelink"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully joined playlist team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JoinPlaylistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Invalid or expired share link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Playlist already has a team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/playlist-teams": {
      "get": {
        "summary": "Get all playlist teams by user ID",
        "description": "Retrieve all playlist teams where the authenticated user is the team leader",
        "tags": [
          "PlaylistTeam"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Playlist teams retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistTeamsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/playlist-teams/{id}": {
      "get": {
        "summary": "Get playlist team by ID",
        "description": "Retrieve playlist team details including members and playlist information",
        "tags": [
          "PlaylistTeam"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Playlist Team ID"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Playlist team details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaylistTeamResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Playlist team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete playlist team",
        "description": "Delete the entire playlist team (leader only)",
        "tags": [
          "PlaylistTeam"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Playlist Team ID"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Playlist team deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteTeamResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied. Only team leader can delete the team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Playlist team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/playlist-teams/{id}/members/{user_id}": {
      "delete": {
        "summary": "Remove member from playlist team",
        "description": "Remove a specific member from the playlist team (leader only)",
        "tags": [
          "PlaylistTeam"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Playlist Team ID"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Member User ID to remove"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Member removed from team successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMemberResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied. Only team leader can remove members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Playlist team or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/playlist-teams/{id}/leave": {
      "post": {
        "summary": "Leave playlist team",
        "description": "Leave a playlist team as a member (cannot be used by team leader)",
        "tags": [
          "PlaylistTeam"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Playlist Team ID"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully left the team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveTeamResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Team leader cannot leave the team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Playlist team not found or user not a member",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/songs": {
      "get": {
        "summary": "Get all songs with pagination, search, and filters",
        "description": "Retrieve all songs with support for pagination, full-text search across title/artist/lyrics, filtering by base chord and tags, and custom sorting",
        "tags": [
          "Song"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search term for title, artist, or lyrics"
          },
          {
            "in": "query",
            "name": "base_chord",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter songs by base chord"
          },
          {
            "in": "query",
            "name": "tag_ids",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by tag IDs (comma-separated)"
          },
          {
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Sort field"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Songs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SongsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/songs/{id}": {
      "get": {
        "summary": "Get song by ID",
        "description": "Retrieve a single song with all associated tags by its ID",
        "tags": [
          "Song"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Song ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Song details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SongResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "404": {
            "description": "Song not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/songs": {
      "post": {
        "summary": "Create new song",
        "description": "Create a new song with associated tags. Tags will be found by name or created automatically if they don't exist (Admin only)",
        "tags": [
          "Song"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSongRequest"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Song created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SongResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/songs/{id}": {
      "put": {
        "summary": "Update song",
        "description": "Update an existing song and/or its associated tags. Tags will be found by name or created automatically if they don't exist. Include tag_names array to update tags, or omit to keep existing tags (Admin only)",
        "tags": [
          "Song"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Song ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSongRequest"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Song updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SongResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Song not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete song",
        "description": "Delete a song and all its associations (Admin only)",
        "tags": [
          "Song"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Song ID"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Song deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponseWithData"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Song not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "summary": "Get all tags",
        "description": "Retrieve all available tags with search support",
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search term for tag names"
          }
        ],
        "responses": {
          "200": {
            "description": "Tags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/tags/get-or-create": {
      "post": {
        "summary": "Get or create tag",
        "description": "Gets existing tag by name or creates a new one if it doesn't exist",
        "tags": [
          "Tag"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetOrCreateTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag retrieved or created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/user/": {
      "get": {
        "summary": "Get users with elevated privileges (Admin only)",
        "description": "Retrieves a paginated and searchable list of users with userlevel > 2 (requires admin authentication)",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Page number for pagination (default: 1)"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Number of items per page (default: 10)"
          },
          {
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search term to filter by email or nama (case-insensitive partial match)"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions (user level must be > 2)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    }
  }
}