{
  "openapi": "3.0.0",
  "info": {
    "title": "SongBanks API",
    "description": "API documentation for SongBanks application",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Development server"
    },
    {
      "url": "https://api.tahumeat.com/api",
      "description": "Production server"
    }
  ],
  "components": {
    "schemas": {
      "BaseResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          }
        }
      },
      "BaseResponseWithData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "description": "Response data payload"
              }
            }
          }
        ]
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Route not found"
          },
          "message": {
            "type": "string",
            "example": "Cannot GET /api/invalid-route"
          },
          "statusCode": {
            "type": "integer",
            "example": 404
          }
        }
      },
      "BadRequestError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Bad request"
          },
          "message": {
            "type": "string",
            "example": "Bad request"
          },
          "statusCode": {
            "type": "integer",
            "example": 400
          }
        }
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Unauthorized"
          },
          "message": {
            "type": "string",
            "example": "Unauthorized"
          },
          "statusCode": {
            "type": "integer",
            "example": 401
          }
        }
      },
      "ForbiddenError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Forbidden"
          },
          "message": {
            "type": "string",
            "example": "Forbidden"
          },
          "statusCode": {
            "type": "integer",
            "example": 403
          }
        }
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Internal server error"
          },
          "message": {
            "type": "string",
            "example": "Internal server error"
          },
          "statusCode": {
            "type": "integer",
            "example": 500
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Validation error"
          },
          "message": {
            "type": "string",
            "example": "Request validation failed"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "example": "email"
                },
                "message": {
                  "type": "string",
                  "example": "Email is required"
                }
              }
            }
          },
          "statusCode": {
            "type": "integer",
            "example": 422
          }
        }
      },
      "ConflictError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Conflict"
          },
          "message": {
            "type": "string",
            "example": "Resource already exists"
          },
          "statusCode": {
            "type": "integer",
            "example": 409
          }
        }
      },
      "AccountAccessDeniedError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 403
          },
          "message": {
            "type": "string",
            "example": "Account access denied"
          },
          "error": {
            "type": "string",
            "example": "Your account status is inactive. Please contact administrator."
          }
        }
      },
      "SimpleError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Invalid status. Must be either \"active\" or \"suspend\""
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "user123"
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "role": {
            "type": "string",
            "enum": ["admin", "member"],
            "example": "member"
          },
          "status": {
            "type": "string",
            "enum": ["active", "pending", "suspend", "request", "guest"],
            "example": "active"
          },
          "is_admin": {
            "type": "boolean",
            "example": false,
            "description": "Only present for admin users"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "example": "password123"
          }
        }
      },
      "LoginResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponseWithData"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "example": 200
              },
              "message": {
                "example": "Login successful"
              },
              "data": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  },
                  "user": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        ]
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Logout successful"
          }
        }
      },
      "Song": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "song123"
          },
          "title": {
            "type": "string",
            "example": "Song Title"
          },
          "artist": {
            "type": "string",
            "example": "Artist Name"
          }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "note123"
          },
          "notes": {
            "type": "string",
            "example": "This is a note"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "Song": {
            "$ref": "#/components/schemas/Song"
          }
        }
      },
      "NotesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Get All Notes"
          },
          "id": {
            "type": "string",
            "example": "user123"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          }
        }
      },
      "UserAccessResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponseWithData"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "example": 200
              },
              "message": {
                "example": "User access list retrieved successfully"
              },
              "data": {
                "type": "object",
                "properties": {
                  "active_users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "request_users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "suspended_users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "UpdateUserAccessRequest": {
        "type": "object",
        "required": ["status"],
        "properties": {
          "status": {
            "type": "string",
            "enum": ["active", "suspend"],
            "example": "active"
          }
        }
      },
      "UpdateUserAccessResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponseWithData"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "example": 200
              },
              "message": {
                "example": "User access updated successfully"
              },
              "data": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "user123"
                  },
                  "status": {
                    "type": "string",
                    "example": "active"
                  }
                }
              }
            }
          }
        ]
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "tag123"
          },
          "name": {
            "type": "string",
            "example": "Rock"
          },
          "description": {
            "type": "string",
            "example": "Rock music genre"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateTagRequest": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Rock",
            "description": "The name of the tag"
          },
          "description": {
            "type": "string",
            "example": "Rock music genre",
            "description": "Optional description of the tag"
          }
        }
      },
      "UpdateTagRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Rock",
            "description": "The name of the tag"
          },
          "description": {
            "type": "string",
            "example": "Rock music genre",
            "description": "Optional description of the tag"
          }
        }
      },
      "TagsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Get All Tags"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "TagResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Tag created successfully"
          },
          "data": {
            "$ref": "#/components/schemas/Tag"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "paths": {
    "/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticate user with email and password",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Account access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAccessDeniedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "User logout",
        "description": "Logout authenticated user",
        "tags": ["Auth"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "description": "Request payload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/notes/{user_id}": {
      "get": {
        "summary": "Get notes by user ID",
        "description": "Retrieve all notes for a specific user",
        "tags": ["Note"],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/user-access": {
      "get": {
        "summary": "Retrieve user access list",
        "description": "Get a list of users with their access status for admin management",
        "tags": ["Admin / User"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User access list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/user-access/{user_id}": {
      "put": {
        "summary": "Update user access status",
        "description": "Admin can update the status for a specific user (active or suspend)",
        "tags": ["Admin / User"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserAccessRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User access updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserAccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/tags/": {
      "get": {
        "summary": "Get all tags",
        "description": "Retrieve all available tags",
        "tags": ["Tag"],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new tag",
        "description": "Create a new tag with name and description",
        "tags": ["Tag"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{id}": {
      "get": {
        "summary": "Get tag by ID",
        "description": "Retrieve a specific tag by its ID",
        "tags": ["Tag"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update tag",
        "description": "Update an existing tag by ID",
        "tags": ["Tag"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id parameter"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete tag",
        "description": "Delete a tag by ID",
        "tags": ["Tag"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id parameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Tag deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    }
  }
}